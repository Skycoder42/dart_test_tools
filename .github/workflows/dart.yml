on:
  workflow_call:
    inputs:
      analyzeImage:
        type: string
        required: false
        default: ubuntu-latest
        description: The Runner-Image to use for the analyze step. Uses ubuntu-latest by default.
      needsFlutterSdk:
        type: boolean
        required: false
        default: false
        description: Specifies whether this dart package needs the flutter SDK. This can be the case if the package is part of a workspace that also contains a flutter package.
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      flutterSdkChannel:
        type: string
        required: false
        default: stable
        description: The Flutter-SDK channel. Passed as "channel" to "subosito/flutter-action".
      withSubmodules:
        type: boolean
        required: false
        default: false
        description: Specify if submodules should be initialized or not.
      artifactDependencies:
        type: string
        required: false
        default: ""
        description: A space-separated list of package names that should be downloaded from the artifacts and overwritten for the workflow. The packages should be space separated and placed in a single line. You can use the YAML ">-" for that.
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildDependencies:
        type: string
        required: false
        description: A spaces separated list of other packages within this workspace that make use of build_runner and need to be built before this package.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        description: Optional additional arguments to be passed to the build runner.
      panaScoreThreshold:
        type: number
        required: false
        default: 0
        description: The threshold that the pana score is allowed to be below the maximum value.
      unitTestPaths:
        type: string
        required: false
        default: test
        description: Specify directories or paths of unit tests to run. By default, all test in the test directory are run.
      minCoverage:
        type: number
        required: false
        default: 95
        description: Minimal coverage (in percent) required for the CI to succeed. Passed as "min_coverage" to "VeryGoodOpenSource/very_good_coverage".
      coverageExclude:
        type: string
        required: false
        description: Files to exclude from test coverage. Passed as command line arguments to a bash script. Excludes should be properly escaped, e.g. 'config.dart "**/*.g.dart"'.
      integrationTestPaths:
        type: string
        required: false
        description: Specify directories or paths of integration tests to run. By default, no integration test are run.
      integrationTestCacheConfig:
        type: string
        required: false
        description: |
          A JSON-Matrix a caching configuration, if needed. Can be used to enable caching
          for expensive integration test setup scenarios.

          Example:
          {
            "key": "test-cache-key",
            "path": "path/to/cache-dir"
          }
      integrationTestSetup:
        type: string
        required: false
        default: '{}'
        description: |
          A JSON-Matrix with extra setup steps for each platform.
          contains key-value pairs for each platform with a command to be invoked.
          The possible keys are the same as the platforms defined in 'platforms'.

          Example:
          {
            "linux": "dart run tools/install-deps.dart",
            "web": "./setup-web.sh"
          }
    outputs:
      enabledPlatforms:
        value: ${{ jobs.analyze.outputs.platforms }}
        description: A JSON-encoded list of all platforms that this project can build/run for.
    secrets:
      integrationTestEnvVars:
        required: false
        description: |
          Secret environment variables to be set for the integration test run step.
          Pass a multi line string of key-value pairs. You should only use
          secrets for the values of these objects. The CI will create a .env file in the
          workingDirectory containing those values. You can use the 'TestEnv.load()' of
          the dart_test_tools package to read them in your integration tests.

          Example:
          MY_API_KEY=<reference secret here>"
jobs:
  analyze:
    name: Analyze
    outputs:
      platforms: ${{ steps.checkPlatforms.outputs.platforms }}
    runs-on: ${{ inputs.analyzeImage }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: '!inputs.needsFlutterSdk'
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: inputs.needsFlutterSdk
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: inputs.needsFlutterSdk
        run: flutter precache --universal
      - name: Install pana
        run: dart pub global activate pana
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Download artifacts
        if: inputs.artifactDependencies != ''
        uses: actions/download-artifact@v5
        with:
          pattern: package-*
          path: ${{ runner.temp }}/.artifacts
      - name: Create pubspec_overrides.yaml for artifact packages
        if: inputs.artifactDependencies != ''
        run: |
          set -eo pipefail
          if [[ ! -f pubspec_overrides.yaml ]]; then
            yq '{"dependency_overrides": .dependency_overrides}' pubspec.yaml > pubspec_overrides.yaml
          fi
          for package in ${{ inputs.artifactDependencies }}; do
            yq -i ".dependency_overrides.$package.path=\"${{ runner.temp }}/.artifacts/package-$package\"" pubspec_overrides.yaml
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            dart run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: dart run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkPlatforms
        name: Check supported platforms
        run: |
          set -eo pipefail
          platforms=$(yq '.platforms // {} | keys' -o=json -I=0 pubspec.yaml)
          echo "Detected supported platforms as: $platforms"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Static analysis
        run: dart analyze --fatal-infos
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run custom_lint
        run: dart run custom_lint
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate correct formatting
        run: dart format -onone --set-exit-if-changed $(git ls-files '*.dart')
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkPublish
        name: Check if package is publishable
        run: |
          set -eo pipefail
          publish_to=$(cat pubspec.yaml | yq e ".publish_to" -)
          if [[ "$publish_to" == "none" ]]; then
            echo "publish=false" >> $GITHUB_OUTPUT
          else
            echo "publish=true" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Test publishing configuration
        if: steps.checkPublish.outputs.publish == 'true'
        run: dart pub publish --dry-run
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate pana score
        if: steps.checkPublish.outputs.publish == 'true'
        run: dart pub global run pana --exit-code-threshold ${{ inputs.panaScoreThreshold }} .
        working-directory: ${{ inputs.workingDirectory }}
  unit_tests:
    name: Unit tests
    needs:
      - analyze
    if: inputs.unitTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - macos
          - windows
          - web
        include:
          - platform: linux
            os: ubuntu-latest
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
          - platform: macos
            os: macos-latest
            lcovCleanCommand: sed -i "" "s#SF:$PWD/#SF:#g" coverage/lcov.info
          - platform: windows
            os: windows-latest
            lcovCleanCommand: (Get-Content coverage\lcov.info).replace("SF:$PWD\", "SF:").replace("\", "/") | Set-Content coverage\lcov.info
          - platform: web
            os: ubuntu-latest
            dartTestArgs: --platform chrome
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && !inputs.needsFlutterSdk
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.needsFlutterSdk
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.needsFlutterSdk
        run: flutter precache --universal
      - name: Install tools
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Download artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.artifactDependencies != ''
        uses: actions/download-artifact@v5
        with:
          pattern: package-*
          path: ${{ runner.temp }}/.artifacts
      - name: Create pubspec_overrides.yaml for artifact packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.artifactDependencies != ''
        run: |
          set -eo pipefail
          if [[ ! -f pubspec_overrides.yaml ]]; then
            yq '{"dependency_overrides": .dependency_overrides}' pubspec.yaml > pubspec_overrides.yaml
          fi
          for package in ${{ inputs.artifactDependencies }}; do
            yq -i ".dependency_overrides.$package.path=\"${{ runner.temp }}/.artifacts/package-$package\"" pubspec_overrides.yaml
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            dart run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildRunner
        run: dart run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run unit tests
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: dart test ${{ matrix.dartTestArgs }} --coverage=coverage --reporter github ${{ inputs.unitTestPaths }} || [ $? = 79 ]
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Convert coverage data to lcov format
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.minCoverage > 0
        run: dart run coverage:format_coverage --lcov --check-ignore --in=coverage --out=coverage/lcov.info --report-on=lib
        working-directory: ${{ inputs.workingDirectory }}
      - name: Normalize coverage paths
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.minCoverage > 0
        run: ${{ matrix.lcovCleanCommand }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage data
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.minCoverage > 0
        uses: actions/upload-artifact@v4
        with:
          name: coverage-info-${{ matrix.platform }}
          path: ${{ inputs.workingDirectory }}/coverage/lcov.info
          retention-days: 1
          if-no-files-found: error
  coverage:
    name: Validate coverage
    needs:
      - unit_tests
    if: inputs.minCoverage > 0 && inputs.unitTestPaths != ''
    runs-on: ubuntu-latest
    steps:
      - name: Install coverage tools
        run: |
          set -e
          sudo apt-get -qq update
          sudo apt-get -qq install lcov dos2unix
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Download coverage data
        uses: actions/download-artifact@v5
        with:
          path: ${{ inputs.workingDirectory }}/coverage
          pattern: coverage-info-*
      - name: Merge coverage data
        run: |
          set -e
          LCOV_ARGS=""
          find coverage
          for dir in coverage/coverage-info-*; do
            dos2unix $dir/lcov.info
            LCOV_ARGS="$LCOV_ARGS --add-tracefile $dir/lcov.info"
          done
          lcov $LCOV_ARGS --output-file coverage/combined.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Remove excluded files from coverage data
        run: lcov --ignore-errors unused --remove coverage/combined.info --output-file coverage/cleaned.info ${{ inputs.coverageExclude }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Generate coverage report
        run: genhtml --no-function-coverage --synthesize-missing -o coverage/html coverage/cleaned.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: ${{ inputs.workingDirectory }}/coverage/html
          retention-days: 14
          if-no-files-found: error
      - name: Validate coverage is at least ${{ inputs.minCoverage }}%
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: ${{ inputs.workingDirectory }}/coverage/cleaned.info
          min_coverage: ${{ inputs.minCoverage }}
  integration_tests:
    name: Integration tests
    needs:
      - analyze
    if: inputs.integrationTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - macos
          - windows
          - web
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: macos
            os: macos-latest
          - platform: windows
            os: windows-latest
          - platform: web
            os: ubuntu-latest
            dartTestArgs: -p chrome
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && !inputs.needsFlutterSdk
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.needsFlutterSdk
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.needsFlutterSdk
        run: flutter precache --universal
      - name: Install tools
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Download artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.artifactDependencies != ''
        uses: actions/download-artifact@v5
        with:
          pattern: package-*
          path: ${{ runner.temp }}/.artifacts
      - name: Create pubspec_overrides.yaml for artifact packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.artifactDependencies != ''
        run: |
          set -eo pipefail
          if [[ ! -f pubspec_overrides.yaml ]]; then
            yq '{"dependency_overrides": .dependency_overrides}' pubspec.yaml > pubspec_overrides.yaml
          fi
          for package in ${{ inputs.artifactDependencies }}; do
            yq -i ".dependency_overrides.$package.path=\"${{ runner.temp }}/.artifacts/package-$package\"" pubspec_overrides.yaml
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            dart run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildRunner
        run: dart run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - id: test-setup-cache
        name: Restore integration test cache
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.integrationTestCacheConfig != '' && fromJSON(inputs.integrationTestSetup)[matrix.platform] != ''
        uses: actions/cache@v4
        with:
          key: ${{ matrix.platform }}-${{ fromJSON(inputs.integrationTestCacheConfig)['key'] }}
          path: ${{ fromJSON(inputs.integrationTestCacheConfig)['path'] }}
          restore-keys: ${{ fromJSON(inputs.integrationTestCacheConfig)['restore-keys'] }}
          upload-chunk-size: ${{ fromJSON(inputs.integrationTestCacheConfig)['upload-chunk-size'] }}
      - name: Create .env file from secrets
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: echo '${{ secrets.integrationTestEnvVars }}' > .env
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Run platform test setup
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && fromJSON(inputs.integrationTestSetup)[matrix.platform] != ''
        env:
          CACHE_HIT: ${{ steps.test-setup-cache.outputs.cache-hit }}
        run: ${{ fromJSON(inputs.integrationTestSetup)[matrix.platform] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run integration tests
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: dart test ${{ matrix.dartTestArgs }} --reporter github ${{ inputs.integrationTestPaths }} || [ $? = 79 ]
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Shred .env file
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && always()
        run: shred -fzvu .env
        working-directory: ${{ inputs.workingDirectory }}
