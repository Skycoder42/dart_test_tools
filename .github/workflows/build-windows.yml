on:
  workflow_call:
    inputs:
      flutterSdkChannel:
        type: string
        required: false
        default: stable
        description: The Flutter-SDK channel. Passed as "channel" to "subosito/flutter-action".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildDependencies:
        type: string
        required: false
        description: A spaces separated list of other packages within this workspace that make use of build_runner and need to be built before this package.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        description: Optional additional arguments to be passed to the build runner.
      buildNumberArgs:
        type: string
        required: false
        default: ""
        description: Additional args for the build number generator.
    secrets:
      dartDefines:
        required: false
        description: |
          Additional dart-defines that are passed to the build command. In the format of:

          VARIABLE1=value1
          VARIABLE2=value2
jobs:
  build_windows:
    name: Build windows msix installer
    runs-on: windows-latest
    steps:
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal --windows
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "true"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Restore dart packages
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: flutter pub run build_runner build --release ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - id: generateBuildNumber
        name: Generate build number
        run: dart pub global run dart_test_tools:generate_build_number ${{ inputs.buildNumberArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Prepare dart defines
        run: echo '${{ secrets.dartDefines }}' > '${{ runner.temp }}/dart-defines.env'
        shell: bash
      - name: Build windows
        run: flutter build windows --release --build-number=${{ steps.generateBuildNumber.outputs.buildNumber }} --dart-define-from-file='${{ runner.temp }}/dart-defines.env'
        working-directory: ${{ inputs.workingDirectory }}
      - name: Cleanup secure files
        if: always()
        continue-on-error: true
        run: |
          rm -rfv '${{ runner.temp }}/dart-defines.env'
        shell: bash
      - name: Create msix package
        run: dart run msix:create --release --store --build-windows false --output-path build\windows\msix
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload app and debug info
        uses: actions/upload-artifact@v4
        with:
          name: app-deployment-windows
          path: ${{ inputs.workingDirectory }}/build/windows/msix
          retention-days: 1
          if-no-files-found: error
