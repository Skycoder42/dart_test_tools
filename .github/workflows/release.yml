on:
  workflow_call:
    inputs:
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
    outputs:
      releaseCreated:
        value: ${{ jobs.release.outputs.update }}
        description: Holds a boolean value string ("true" or "false"), indicating whether a release was created or not.
      releaseVersion:
        value: ${{ jobs.release.outputs.version }}
        description: Holds the version number of the created release, if the releaseCreated output is true. Otherwise, it is not set.
    secrets:
      githubToken:
        required: true
        description: The personal access token to create new releases with. Is required, as the default github workflow token does not trigger workflows when creating releases.
jobs:
  release:
    name: Create release if needed
    if: github.ref == inputs.releaseRef
    outputs:
      update: ${{ steps.version.outputs.update }}
      version: ${{ steps.version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - id: version
        name: Check if package should be published
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          version_exists_query=".versions | .[] | select(.version == \"$package_version\") | .version"

          pub_info_file=$(mktemp)
          curl -sSLo $pub_info_file \
            -H "Accept: application/vnd.pub.v2+json" \
            -H "Accept-Encoding: identity" \
            "https://pub.dev/api/packages/$package_name"

          if cat $pub_info_file | jq -e "$version_exists_query" > /dev/null; then
            echo Version already exists on pub.dev - skipping deployment
            echo "update=false" >> $GITHUB_OUTPUT
          else
            echo Version does not exists on pub.dev - creating release
            echo "update=true" >> $GITHUB_OUTPUT
            echo "version=$package_version" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
      - name: Activate cider
        if: steps.version.outputs.update == 'true'
        run: dart pub global activate cider
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "# Changelog" > $version_changelog_file
          dart pub global run cider describe "$package_version" >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "The package and it's documentation are available at [pub.dev](https://pub.dev/packages/$package_name/versions/$package_version)." >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.githubToken }}
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
