on:
  workflow_call:
    inputs:
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
      persistCredentials:
        type: boolean
        required: false
        default: false
        description: Specifies, whether git credentials should be persisted for the run. Might be needed in case the repository is a private repository to figure out whether a new release is required or not.
      enabledPlatforms:
        type: string
        required: true
        description: A JSON-encoded list of all platforms that this project can build/run for.
      flatpakSdkVersion:
        type: string
        required: false
        default: "23.08"
        description: The version of the freedesktop sdk and runtime being used.
      targetRepo:
        type: string
        required: false
        description: The repository identifier (<owner>/<repo>) to which the cask should be published.
    outputs:
      releaseCreated:
        value: ${{ jobs.release.outputs.update }}
        description: Holds a boolean value string ("true" or "false"), indicating whether a release was created or not.
      releaseVersion:
        value: ${{ jobs.release.outputs.version }}
        description: Holds the version number of the created release, if the releaseCreated output is true. Otherwise, it is not set.
    secrets:
      gpgKey:
        required: false
        description: The GPG key to sign the flatpak bundle and repository with.
      gpgKeyId:
        required: false
        description: The id of the gpgKey
      targetRepoToken:
        required: false
        description: A GitHub PAT that has the permission to push commits to the targetRepo.
jobs:
  release:
    name: Create release if needed
    if: github.ref == inputs.releaseRef
    permissions:
      contents: write
    outputs:
      update: ${{ steps.version.outputs.update }}
      version: ${{ steps.version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: ${{ inputs.persistCredentials }}
      - id: version
        name: Check if a release should be created
        run: |
          set -eo pipefail
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          git fetch --tags > /dev/null
          tag_exists=$(git tag -l "${{ inputs.tagPrefix }}$package_version")

          if [[ -z "$tag_exists" ]]; then
            echo Release does not exist yet - creating release
            echo "update=true" >> $GITHUB_OUTPUT
            echo "version=$package_version" >> $GITHUB_OUTPUT
          else
            echo Release already exists - skipping creation
            echo "update=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
      - name: Download all binary artifacts
        if: steps.version.outputs.update == 'true'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: app-deployment-*
      - name: Activate cider
        if: steps.version.outputs.update == 'true'
        run: dart pub global activate cider
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "# Changelog" > $version_changelog_file
          dart pub global run cider describe "$package_version" >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
          target_commitish: ${{ github.sha }}
          files: artifacts/app-deployment-*/*
  deploy_linux:
    name: Deploy flatpak bundles to GitHub Pages
    needs:
      - release
    if: needs.release.outputs.update == 'true' && (inputs.enabledPlatforms == '[]' || contains(fromJSON(inputs.enabledPlatforms), 'linux'))
    environment: flatpak
    permissions:
      contents: write
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-${{ inputs.flatpakSdkVersion }}
      options: --privileged
    steps:
      - name: '[Validate Inputs] Ensure gpgKeyId is set'
        run: |
          if [[ '${{ secrets.gpgKeyId }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input gpgKeyId is not set'
            exit 1
          fi
      - name: '[Validate Inputs] Ensure gpgKey is set'
        run: |
          if [[ '${{ secrets.gpgKey }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input gpgKey is not set'
            exit 1
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          path: repo
          ref: gh-pages
      - name: Download flatpak bundle artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: flatpak-bundle-*
          path: bundles
      - name: Import GPG key
        run: echo '${{ secrets.gpgKey }}' | gpg --import
      - name: Import bundles into repository
        run: |
          set -eo pipefail
          for bundle in bundles/*/*.flatpak; do
            echo "Importing $bundle..."
            flatpak build-import-bundle \
              --update-appstream \
              --gpg-sign='${{ secrets.gpgKeyId }}' \
              repo \
              "$bundle"
          done
      - name: Generate static deltas
        run: flatpak build-update-repo --generate-static-deltas --prune --gpg-sign='${{ secrets.gpgKeyId }}' repo
      - name: Delete GPG key
        if: always()
        continue-on-error: true
        run: gpg --batch --yes --delete-secret-keys '${{ secrets.gpgKeyId }}'
      - name: Commit repository updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: gh-pages
          repository: repo
          skip_dirty_check: true
  deploy_macos:
    name: Deploy DMG image to homebrew tap
    needs:
      - release
    if: needs.release.outputs.update == 'true' && (inputs.enabledPlatforms == '[]' || contains(fromJSON(inputs.enabledPlatforms), 'macos'))
    environment: homebrew
    runs-on: macos-latest
    steps:
      - name: '[Validate Inputs] Ensure targetRepo is set'
        run: |
          if [[ '${{ inputs.targetRepo }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input targetRepo is not set'
            exit 1
          fi
      - name: '[Validate Inputs] Ensure targetRepoToken is set'
        run: |
          if [[ '${{ secrets.targetRepoToken }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input targetRepoToken is not set'
            exit 1
          fi
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install dart_test_tools
        run: dart pub global activate dart_test_tools ^5.10.1
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          path: src
      - name: Checkout ${{ inputs.targetRepo }}
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          path: tap
          repository: ${{ inputs.targetRepo }}
          token: ${{ secrets.targetRepoToken }}
      - id: generate-cask
        name: Generate cask formula
        run: dart pub global run dart_test_tools:generate_cask --input 'src/${{ inputs.workingDirectory }}' --output tap
      - name: Tap local repository
        run: brew tap ${{ inputs.targetRepo }} tap
      - name: Audit generated cask
        run: brew audit --arch all --strict --git --online --no-signing --token-conflicts --cask '${{ inputs.targetRepo }}/${{ steps.generate-cask.outputs.caskName }}'
      - name: Commit repository updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Updated cask to v${{ needs.release.outputs.version }}
          repository: tap
