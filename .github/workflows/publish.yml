on:
  workflow_call:
    inputs:
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
      flutter:
        type: boolean
        required: false
        default: false
        description: Specifies, whether the package is a dart or a flutter package.
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      flutterSdkChannel:
        type: string
        required: false
        default: stable
        description: The Flutter-SDK channel. Passed as "channel" to "subosito/flutter-action".
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        default: ""
        description: Optional additional arguments to be passed to the build runner.
      publish:
        type: boolean
        required: false
        default: true
        description: Publish to pub.dev, if a new release was created. Enabled by default. Requires the PUB_DEV_CREDENTIALS secret to be set.
      publishExclude:
        type: string
        required: false
        default: '[]'
        description: |
          Specify a JSON array of paths to be excluded from publishing.
          Example: '["secrets.txt","debug.log"]'
      prePublish:
        type: string
        required: false
        description: A command to be run before publishing the package
    outputs:
      releaseCreated:
        value: ${{ jobs.release.outputs.update }}
        description: Holds a boolean value string ("true" or "false"), indicating whether a release was created or not.
    secrets:
      PUB_DEV_CREDENTIALS:
        required: false
        description: The JSON-encoded credentials to log into pub.dev.
jobs:
  release:
    name: Create release if needed
    if: github.ref == inputs.releaseRef
    outputs:
      update: ${{ steps.version.outputs.update }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
      - id: version
        name: Check if package should be published
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          version_exists_query=".versions | .[] | select(.version == \"$package_version\") | .version"

          pub_info_file=$(mktemp)
          curl -sSLo $pub_info_file \
            -H "Accept: application/vnd.pub.v2+json" \
            -H "Accept-Encoding: identity" \
            "https://pub.dev/api/packages/$package_name"

          if cat $pub_info_file | jq -e "$version_exists_query" > /dev/null; then
            echo Version already exists on pub.dev - skipping deployment
            echo "update=false" >> $GITHUB_OUTPUT
          else
            echo Version does not exists on pub.dev - creating release
            echo "update=true" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "## Changelog" > $version_changelog_file
          cat CHANGELOG.md | sed '/^## '$package_version'.*$/,/^## /!d;//d' >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "The package and it's documentation are available at [pub.dev](https://pub.dev/packages/$package_name/versions/$package_version)." >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
  publish:
    name: Publish to pub.dev
    needs:
      - release
    if: inputs.publish && needs.release.outputs.update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: '!inputs.flutter'
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: inputs.flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: inputs.flutter
        run: flutter precache --universal
      - id: tools
        name: Prepare build tools
        run: |
          if ${{ inputs.flutter }}; then
            echo "pub=flutter pub" >> $GITHUB_OUTPUT
            echo "pubRun=flutter pub run" >> $GITHUB_OUTPUT
          else
            echo "pub=dart pub" >> $GITHUB_OUTPUT
            echo "pubRun=dart run" >> $GITHUB_OUTPUT
          fi
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
      - name: Remove pubspec_overrides.yaml
        run: find . -type f -name "pubspec_overrides.yaml" -exec git rm -f {} \;
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        run: ${{ steps.tools.outputs.pub }} get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: ${{ steps.tools.outputs.pubRun }} build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run pre publish script
        if: inputs.prePublish != ''
        run: ${{ inputs.prePublish }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Prepare pub.dev credentials
        run: |
          set -e
          cache_dir="$XDG_CONFIG_HOME/dart"
          mkdir -p "$cache_dir"
          echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > "$cache_dir/pub-credentials.json"
      - name: Remove files to not be published
        if: inputs.publishExclude != ''
        run: |
          set -e
          echo '${{ inputs.publishExclude }}' | jq -cr '.[]' | while read exclude; do
            if [ -e "$exclude" ]; then
              git rm -rf "$exclude" || rm -rf "$exclude"
            fi
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Publish package
        run: ${{ steps.tools.outputs.pub }} publish --force
        working-directory: ${{ inputs.workingDirectory }}
      - name: Clean up credentials
        if: always()
        run: shred -fzvu "$XDG_CONFIG_HOME/dart/pub-credentials.json"
