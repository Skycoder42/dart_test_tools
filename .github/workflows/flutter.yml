on:
  workflow_call:
    inputs:
      analyzeImage:
        type: string
        required: false
        default: ubuntu-latest
        description: The Runner-Image to use for the analyze step. Uses ubuntu-latest by default.
      flutterSdkChannel:
        type: string
        required: false
        default: stable
        description: The Flutter-SDK channel. Passed as "channel" to "subosito/flutter-action".
      javaJdkVersion:
        type: number
        required: false
        default: 21
        description: The Java-SDK version (mayor only). Passed as "java-version" to "actions/setup-java".
      withSubmodules:
        type: boolean
        required: false
        default: false
        description: Specify if submodules should be initialized or not.
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildDependencies:
        type: string
        required: false
        description: A spaces separated list of other packages within this workspace that make use of build_runner and need to be built before this package.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        description: Optional additional arguments to be passed to the build runner.
      panaScoreThreshold:
        type: number
        required: false
        default: 0
        description: The threshold that the pana score is allowed to be below the maximum value.
      unitTestPaths:
        type: string
        required: false
        default: test
        description: Specify directories or paths of unit tests to run. By default, all test in the test directory are run.
      minCoverage:
        type: number
        required: false
        default: 95
        description: Minimal coverage (in percent) required for the CI to succeed. Passed as "min_coverage" to "VeryGoodOpenSource/very_good_coverage".
      coverageExclude:
        type: string
        required: false
        description: Files to exclude from test coverage. Passed as command line arguments to a bash script. Excludes should be properly escaped, e.g. 'config.dart "**/*.g.dart"'.
      integrationTestPaths:
        type: string
        required: false
        description: Specify directories or paths of integration tests to run. By default, no integration test are run.
      firebaseProjectId:
        type: string
        required: false
        description: The firebase project id to run the test on.
      integrationTestProject:
        type: string
        required: false
        description: Specifies the project in which integration tests are placed. Useful in case of flutter libraries, where integration tests are typically inside the example instead of the package itself
      integrationTestCacheConfig:
        type: string
        required: false
        description: |
          A JSON-Matrix a caching configuration, if needed. Can be used to enable caching
          for expensive integration test setup scenarios.

          Example:
          {
            "key": "test-cache-key",
            "path": "path/to/cache-dir"
          }
      integrationTestSetup:
        type: string
        required: false
        default: '{}'
        description: |
          A JSON-Matrix with extra setup steps for each platform.
          contains key-value pairs for each platform with a command to be invoked.
          The possible keys are the same as the platforms defined in 'platforms'.

          Example:
          {
            "linux": "dart run tools/install-deps.dart",
            "web": "./setup-web.sh"
          }
    outputs:
      enabledPlatforms:
        value: ${{ jobs.analyze.outputs.platforms }}
        description: A JSON-encoded list of all platforms that this project can build/run for.
    secrets:
      firebaseCredentials:
        required: false
        description: The firebase credentials JSON.
      provisioningProfile:
        required: false
        description: The base64 encoded provisioning profile to be used to sign the app.
      signingIdentity:
        required: false
        description: The base64 encoded PKCS#12 container with the code signing certificate and private key to sign the app. Must be a certificate that is allowed by the provisioningProfile. Use the signingIdentityPassphrase secret to specify the passphrase that is needed to decrypt the PKCS#12 file.
      signingIdentityPassphrase:
        required: false
        description: The passphrase to decrypt the signingIdentity PKCS#12 file.
jobs:
  analyze:
    name: Analyze
    outputs:
      platforms: ${{ steps.checkPlatforms.outputs.platforms }}
    runs-on: ${{ inputs.analyzeImage }}
    steps:
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal
      - name: Install pana
        run: flutter pub global activate pana
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkPlatforms
        name: Check supported platforms
        run: |
          set -eo pipefail
          platforms=$(yq '.platforms // {} | keys' -o=json -I=0 pubspec.yaml)
          echo "Detected supported platforms as: $platforms"
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Static analysis
        run: flutter analyze
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run custom_lint
        run: flutter pub run custom_lint
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate correct formatting
        run: dart format -onone --set-exit-if-changed $(git ls-files '*.dart')
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkPublish
        name: Check if package is publishable
        run: |
          set -eo pipefail
          publish_to=$(cat pubspec.yaml | yq e ".publish_to" -)
          if [[ "$publish_to" == "none" ]]; then
            echo "publish=false" >> $GITHUB_OUTPUT
          else
            echo "publish=true" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Test publishing configuration
        if: steps.checkPublish.outputs.publish == 'true'
        run: flutter pub publish --dry-run
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate pana score
        if: steps.checkPublish.outputs.publish == 'true'
        run: flutter pub global run pana --exit-code-threshold ${{ inputs.panaScoreThreshold }} .
        working-directory: ${{ inputs.workingDirectory }}
  unit_tests:
    name: Unit tests
    needs:
      - analyze
    if: inputs.unitTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - macos
          - windows
          - web
        include:
          - platform: linux
            os: ubuntu-latest
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
            coverageArgs: --coverage
          - platform: macos
            os: macos-latest
            lcovCleanCommand: sed -i "" "s#SF:$PWD/#SF:#g" coverage/lcov.info
            coverageArgs: --coverage
          - platform: windows
            os: windows-latest
            lcovCleanCommand: (Get-Content coverage\lcov.info).replace("SF:$PWD\", "SF:").replace("\", "/") | Set-Content coverage\lcov.info
            coverageArgs: --coverage
          - platform: web
            os: ubuntu-latest
            dartTestArgs: --platform chrome
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
            coverageArgs: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter precache --universal
      - name: Install tools
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run unit tests
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter test ${{ matrix.dartTestArgs }} ${{ matrix.coverageArgs }} --reporter github ${{ inputs.unitTestPaths }} || [ $? = 79 ]
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Normalize coverage paths
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.minCoverage > 0 && matrix.coverageArgs != ''
        run: ${{ matrix.lcovCleanCommand }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage data
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.minCoverage > 0 && matrix.coverageArgs != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-info-${{ matrix.platform }}
          path: ${{ inputs.workingDirectory }}/coverage/lcov.info
          retention-days: 1
          if-no-files-found: error
  coverage:
    name: Validate coverage
    needs:
      - unit_tests
    if: inputs.minCoverage > 0 && inputs.unitTestPaths != ''
    runs-on: ubuntu-latest
    steps:
      - name: Install coverage tools
        run: |
          set -e
          sudo apt-get -qq update
          sudo apt-get -qq install lcov dos2unix
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Download coverage data
        uses: actions/download-artifact@v5
        with:
          path: ${{ inputs.workingDirectory }}/coverage
          pattern: coverage-info-*
      - name: Merge coverage data
        run: |
          set -e
          LCOV_ARGS=""
          for dir in coverage/coverage-info-*; do
            dos2unix $dir/lcov.info
            LCOV_ARGS="$LCOV_ARGS --add-tracefile $dir/lcov.info"
          done
          lcov $LCOV_ARGS --output-file coverage/combined.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Remove excluded files from coverage data
        run: lcov --ignore-errors unused --remove coverage/combined.info --output-file coverage/cleaned.info ${{ inputs.coverageExclude }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Generate coverage report
        run: genhtml --no-function-coverage --synthesize-missing -o coverage/html coverage/cleaned.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: ${{ inputs.workingDirectory }}/coverage/html
          retention-days: 14
          if-no-files-found: error
      - name: Validate coverage is at least ${{ inputs.minCoverage }}%
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: ${{ inputs.workingDirectory }}/coverage/cleaned.info
          min_coverage: ${{ inputs.minCoverage }}
  integration_tests_android:
    name: Integration tests (android)
    needs:
      - analyze
    if: inputs.integrationTestPaths != '' && (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), 'android')) && inputs.firebaseProjectId != ''
    runs-on: ubuntu-latest
    steps:
      - name: '[Validate Inputs] Ensure firebaseCredentials is set'
        run: |
          if [[ '${{ secrets.firebaseCredentials }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input firebaseCredentials is not set'
            exit 1
          fi
        shell: bash
      - name: Install JDK Version ${{ inputs.javaJdkVersion }}
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ inputs.javaJdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal --android
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate flutter setup
        run: flutter doctor -v
      - name: Restore dart packages (Integration test project)
        if: inputs.integrationTestProject != ''
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - id: test-setup-cache
        name: Restore integration test cache
        if: inputs.integrationTestCacheConfig != '' && fromJSON(inputs.integrationTestSetup)['android'] != ''
        uses: actions/cache@v4
        with:
          key: android-${{ fromJSON(inputs.integrationTestCacheConfig)['key'] }}
          path: ${{ fromJSON(inputs.integrationTestCacheConfig)['path'] }}
          restore-keys: ${{ fromJSON(inputs.integrationTestCacheConfig)['restore-keys'] }}
          upload-chunk-size: ${{ fromJSON(inputs.integrationTestCacheConfig)['upload-chunk-size'] }}
      - name: Run platform test setup
        if: fromJSON(inputs.integrationTestSetup)['android'] != ''
        env:
          CACHE_HIT: ${{ steps.test-setup-cache.outputs.cache-hit }}
        run: ${{ fromJSON(inputs.integrationTestSetup)['android'] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Build integration test app
        run: flutter build apk --debug --target '${{ inputs.integrationTestPaths }}'
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - name: Build test instrumentation app
        run: ./gradlew app:assembleAndroidTest
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}/android
      - name: Google Cloud Sign In
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.firebaseCredentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ inputs.firebaseProjectId }}
      - name: Run integration tests
        run: gcloud firebase test android run --type instrumentation --app build/app/outputs/apk/debug/app-debug.apk --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
  integration_tests_ios:
    name: Integration tests (ios)
    needs:
      - analyze
    if: inputs.integrationTestPaths != '' && (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), 'ios')) && inputs.firebaseProjectId != ''
    runs-on: macos-latest
    steps:
      - name: '[Validate Inputs] Ensure provisioningProfile is set'
        run: |
          if [[ '${{ secrets.provisioningProfile }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input provisioningProfile is not set'
            exit 1
          fi
        shell: bash
      - name: '[Validate Inputs] Ensure signingIdentity is set'
        run: |
          if [[ '${{ secrets.signingIdentity }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input signingIdentity is not set'
            exit 1
          fi
        shell: bash
      - name: '[Validate Inputs] Ensure signingIdentityPassphrase is set'
        run: |
          if [[ '${{ secrets.signingIdentityPassphrase }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input signingIdentityPassphrase is not set'
            exit 1
          fi
        shell: bash
      - name: '[Validate Inputs] Ensure firebaseCredentials is set'
        run: |
          if [[ '${{ secrets.firebaseCredentials }}' == '' ]]; then
            echo '::error::Platform is enabled, but required input firebaseCredentials is not set'
            exit 1
          fi
        shell: bash
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal --ios
      - name: Enable swift package manager
        run: flutter config --enable-swift-package-manager
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate flutter setup
        run: flutter doctor -v
      - name: Restore dart packages (Integration test project)
        if: inputs.integrationTestProject != ''
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - id: test-setup-cache
        name: Restore integration test cache
        if: inputs.integrationTestCacheConfig != '' && fromJSON(inputs.integrationTestSetup)['ios'] != ''
        uses: actions/cache@v4
        with:
          key: ios-${{ fromJSON(inputs.integrationTestCacheConfig)['key'] }}
          path: ${{ fromJSON(inputs.integrationTestCacheConfig)['path'] }}
          restore-keys: ${{ fromJSON(inputs.integrationTestCacheConfig)['restore-keys'] }}
          upload-chunk-size: ${{ fromJSON(inputs.integrationTestCacheConfig)['upload-chunk-size'] }}
      - name: Run platform test setup
        if: fromJSON(inputs.integrationTestSetup)['ios'] != ''
        env:
          CACHE_HIT: ${{ steps.test-setup-cache.outputs.cache-hit }}
        run: ${{ fromJSON(inputs.integrationTestSetup)['ios'] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Install Signing Identity
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.signingIdentity }}
          p12-password: ${{ secrets.signingIdentityPassphrase }}
      - name: Install Provisioning Profile
        run: |
          set -eo pipefail
          new_dir="$HOME/Library/Developer/Xcode/UserData/Provisioning Profiles"
          old_dir="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$new_dir" "$old_dir"
          echo -n '${{ secrets.provisioningProfile }}' | base64 --decode > "$new_dir/app.mobileprovision"
          ln -s "$new_dir/app.mobileprovision" "$old_dir/app.mobileprovision"
      - name: Build integration test app
        run: flutter build ios --release --config-only '${{ inputs.integrationTestPaths }}'
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - name: Build test instrumentation app
        run: xcodebuild build-for-testing -workspace Runner.xcworkspace -scheme Runner -configuration Release -sdk iphoneos -derivedDataPath ../build/ios_integration
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}/ios
      - name: Create integration test package
        run: zip -r --must-match app-release.zip Release-iphoneos *.xctestrun
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}/build/ios_integration/Build/Products
      - name: Google Cloud Sign In
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.firebaseCredentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ inputs.firebaseProjectId }}
      - name: Run integration tests
        run: gcloud firebase test ios run --type xctest --test build/ios_integration/Build/Products/app-release.zip
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
  integration_tests_desktop:
    name: Integration tests (desktop)
    needs:
      - analyze
    if: inputs.integrationTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - macos
          - windows
        include:
          - platform: linux
            os: ubuntu-latest
            testArgs: -d linux
            runPrefix: xvfb-run --auto-servernum
          - platform: macos
            os: macos-latest
            testArgs: -d macos
          - platform: windows
            os: windows-latest
            testArgs: -d windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter precache --universal --${{ matrix.platform }}
      - name: Enable swift package manager
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && (matrix.platform == 'ios' || matrix.platform == 'macos')
        run: flutter config --enable-swift-package-manager
      - name: Install test dependencies (linux)
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && matrix.platform == 'linux'
        run: |
          set -e
          sudo apt-get -qq update
          sudo apt-get -qq install ninja-build libgtk-3-dev xvfb
      - name: Install tools
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate flutter setup
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: flutter doctor -v
      - name: Restore dart packages (Integration test project)
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.integrationTestProject != ''
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - id: test-setup-cache
        name: Restore integration test cache
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && inputs.integrationTestCacheConfig != '' && fromJSON(inputs.integrationTestSetup)[matrix.platform] != ''
        uses: actions/cache@v4
        with:
          key: ${{ matrix.platform }}-${{ fromJSON(inputs.integrationTestCacheConfig)['key'] }}
          path: ${{ fromJSON(inputs.integrationTestCacheConfig)['path'] }}
          restore-keys: ${{ fromJSON(inputs.integrationTestCacheConfig)['restore-keys'] }}
          upload-chunk-size: ${{ fromJSON(inputs.integrationTestCacheConfig)['upload-chunk-size'] }}
      - name: Run platform test setup
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform)) && fromJSON(inputs.integrationTestSetup)[matrix.platform] != ''
        env:
          CACHE_HIT: ${{ steps.test-setup-cache.outputs.cache-hit }}
        run: ${{ fromJSON(inputs.integrationTestSetup)[matrix.platform] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run integration tests
        if: (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), matrix.platform))
        run: ${{ matrix.runPrefix }} flutter test ${{ matrix.testArgs }} --reporter expanded ${{ inputs.integrationTestPaths }} || [ $? = 79 ]
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
        shell: bash
  integration_tests_web:
    name: Integration tests (web)
    needs:
      - analyze
    if: inputs.integrationTestPaths != '' && (needs.analyze.outputs.platforms == '[]' || contains(fromJSON(needs.analyze.outputs.platforms), 'web'))
    runs-on: windows-latest
    steps:
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ inputs.flutterSdkChannel }}
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal --web
      - name: Install tools
        uses: Skycoder42/dart_test_tools/.github/actions/install-tools@main
        with:
          withDartTestTools: "false"
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: ${{ inputs.withSubmodules }}
      - name: Restore dart packages
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}
      - id: checkGenerate
        name: Check if localizations generation is required
        run: |
          set -eo pipefail
          if [ -f l10n.yaml ]; then
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "generate=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Generate localization files
        if: steps.checkGenerate.outputs.generate == 'true'
        run: flutter gen-l10n
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run build_runner for workspace dependencies
        if: inputs.buildDependencies != ''
        run: |
          set -euo pipefail
          for package in ${{ inputs.buildDependencies }}; do
            echo ">> Running build_runner for $package"
            path=$(
              dart pub workspace list --json \
                | jq -r \
                  --arg package "$package" \
                  '.packages[] | select(.name == $package) | .path'
            )
            cd "$path"
            flutter pub run build_runner build --delete-conflicting-outputs
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create build files
        if: inputs.buildRunner
        run: flutter pub run build_runner build ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate flutter setup
        run: flutter doctor -v
      - name: Restore dart packages (Integration test project)
        if: inputs.integrationTestProject != ''
        run: flutter pub get
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
      - id: test-setup-cache
        name: Restore integration test cache
        if: inputs.integrationTestCacheConfig != '' && fromJSON(inputs.integrationTestSetup)['web'] != ''
        uses: actions/cache@v4
        with:
          key: web-${{ fromJSON(inputs.integrationTestCacheConfig)['key'] }}
          path: ${{ fromJSON(inputs.integrationTestCacheConfig)['path'] }}
          restore-keys: ${{ fromJSON(inputs.integrationTestCacheConfig)['restore-keys'] }}
          upload-chunk-size: ${{ fromJSON(inputs.integrationTestCacheConfig)['upload-chunk-size'] }}
      - name: Run platform test setup
        if: fromJSON(inputs.integrationTestSetup)['web'] != ''
        env:
          CACHE_HIT: ${{ steps.test-setup-cache.outputs.cache-hit }}
        run: ${{ fromJSON(inputs.integrationTestSetup)['web'] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run integration tests
        run: $ChromeWebDriver/chromedriver --port=4444 & flutter drive --driver test_driver/integration_test.dart --target '${{ inputs.integrationTestPaths }}' --release -d chrome --browser-name chrome || [ $? = 79 ]
        working-directory: ${{ inputs.workingDirectory }}/${{ inputs.integrationTestProject }}
        shell: bash
