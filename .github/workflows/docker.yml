on:
  workflow_call:
    inputs:
      imageName:
        type: string
        required: true
        description: The name (e.g. owner/image) of the image to be built and published. The name is combined with generated version tags - See version for details.
      version:
        type: string
        required: true
        description: The released version to upload additional files to or images for.
      latestOnly:
        type: boolean
        required: false
        default: false
        description: If true, only the "*-latest" tags are pushed. Otherwise all versions are pushed.
      extraTags:
        type: string
        required: false
        description: A newline separated list of additional docker tags to be published.
      dockerPlatforms:
        type: string
        required: false
        description: A comma or newline separated list of docker target platforms to build the docker image for. If not specified, the image is built for all available platforms. Passed to docker/build-push-action@v4 as "platforms".
      dockerBuildArgs:
        type: string
        required: false
        description: A newline separated list of docker build arguments to build the docker image with. Passed to docker/build-push-action@v4 as "build-args"
    secrets:
      dockerHubUsername:
        required: true
        description: The user name to log into docker hub with.
      dockerHubToken:
        required: true
        description: The personal access token to log into docker hub with.
jobs:
  docker:
    name: Build and publish Docker images
    runs-on: ubuntu-latest
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - id: setup-docker-buildx
        name: Setup docker buildx
        uses: docker/setup-buildx-action@v2
      - id: generate-tags
        name: Generate docker image tags
        run: |
          set -eo pipefail

          major_version=$(cut -d. -f1 <<< '${{ inputs.version }}')
          minor_version=$(cut -d. -f1-2 <<< '${{ inputs.version }}')
          patch_version=$(cut -d. -f1-3 <<< '${{ inputs.version }}')

          image_versions=( latest "v${major_version}-latest" "v${minor_version}-latest" "v${patch_version}-latest" )
          if [ '${{ inputs.version }}' != "$patch_version"  ]; then
            image_versions+=( 'v${{ inputs.version }}-latest' )
          fi

          if [ '${{ inputs.latestOnly }}' != 'true' ]; then
            image_versions+=( "v${major_version}" "v${minor_version}" "v${patch_version}" )
            if [ '${{ inputs.version }}' != "$patch_version"  ]; then
              image_versions+=( 'v${{ inputs.version }}' )
            fi
          fi

          image_versions+=( ${{ inputs.extraTags }} )

          echo "tags<<EOF" >> $GITHUB_OUTPUT
          printf '${{ inputs.imageName }}:%s\n' "${image_versions[@]}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerHubUsername }}
          password: ${{ secrets.dockerHubToken }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          platforms: ${{ inputs.dockerPlatforms != '' && inputs.dockerPlatforms || steps.setup-docker-buildx.outputs.platforms }}
          build-args: ${{ inputs.dockerBuildArgs }}
          tags: ${{ steps.generate-tags.outputs.tags }}
          pull: true
          sbom: true
          provenance: true
          push: true
