on:
  workflow_call:
    inputs:
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      artifactDependencies:
        type: string
        required: false
        default: ""
        description: A list of package names that should be downloaded from the artifacts and overwritten for the workflow.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        description: Optional additional arguments to be passed to the build runner.
      removePubspecOverrides:
        type: boolean
        required: false
        default: true
        description: Disables pubspec_overrides.yaml cleanup if set to false.
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
      persistCredentials:
        type: boolean
        required: false
        default: false
        description: Specifies, whether git credentials should be persisted for the run. Might be needed in case the repository is a private repository to figure out whether a new release is required or not.
    outputs:
      releaseCreated:
        value: ${{ jobs.release.outputs.update }}
        description: Holds a boolean value string ("true" or "false"), indicating whether a release was created or not.
      releaseVersion:
        value: ${{ jobs.release.outputs.version }}
        description: Holds the version number of the created release, if the releaseCreated output is true. Otherwise, it is not set.
jobs:
  compile:
    name: Create compiled artifacts
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web
        include:
          - platform: linux
            binaryType: exe
            compileArgs: -S "build/bin/$executableName.sym" -o "build/bin/$executableName"
            archiveType: tar
            os: ubuntu-latest
          - platform: windows
            binaryType: exe
            compileArgs: -S "build/bin/$executableName.sym" -o "build/bin/$executableName.exe"
            archiveType: zip
            os: windows-latest
          - platform: macos
            binaryType: exe
            compileArgs: -S "build/bin/$executableName.sym" -o "build/bin/$executableName"
            archiveType: tar
            os: macos-latest
          - platform: web
            binaryType: js
            compileArgs: -O2 --server-mode -o "build/bin/$executableName.js"
            archiveType: zip
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install scoop
        if: runner.os == 'Windows'
        run: |
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH
        shell: pwsh
      - name: Install yq (Windows)
        if: runner.os == 'Windows'
        run: scoop install yq
      - name: Install yq and coreutils (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yq coreutils
          echo "$(brew --prefix)/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - id: platform-check
        name: Check if platform ${{ matrix.platform }} is supported
        run: |
          set -eo pipefail
          isPlatformAllowed=$(yq 'has("platforms") | not or .platforms | has("${{ matrix.platform }}")' pubspec.yaml)
          echo "Platform enabled: $isPlatformAllowed"
          echo "should-run=$isPlatformAllowed" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Remove pubspec_overrides.yaml
        if: inputs.removePubspecOverrides && steps.platform-check.outputs.should-run == 'true'
        run: find . -type f -name "pubspec_overrides.yaml" -exec git rm -f {} \;
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Download artifacts
        if: inputs.artifactDependencies != '' && steps.platform-check.outputs.should-run == 'true'
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/.artifacts
      - name: Create pubspec_overrides.yaml for required packages
        if: inputs.artifactDependencies != '' && steps.platform-check.outputs.should-run == 'true'
        run: |
          set -eo pipefail
          touch pubspec_overrides.yaml
          for package in ${{ inputs.artifactDependencies }}; do
            yq -i \
              ".dependency_overrides.$package.path=\"${{ runner.temp }}/.artifacts/package-$package\"" \
              pubspec_overrides.yaml
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        if: steps.platform-check.outputs.should-run == 'true'
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner && steps.platform-check.outputs.should-run == 'true'
        run: dart run build_runner build --release ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Compile executables
        if: steps.platform-check.outputs.should-run == 'true'
        run: |
          set -eo pipefail
          mkdir -p build/bin
          yq ".executables.[] | key" pubspec.yaml | while read executableName; do
            dartScript=$(yq ".executables.[\"$executableName\"] // \"$executableName\"" pubspec.yaml)
            dart compile ${{ matrix.binaryType }} ${{ matrix.compileArgs }} "bin/$dartScript.dart"
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Create release archives (tar)
        if: matrix.archiveType == 'tar' && steps.platform-check.outputs.should-run == 'true'
        run: |
          set -eo pipefail
          shopt -s extglob
          mkdir -p ../artifacts
          tar -cavf '../artifacts/binaries-${{ matrix.platform }}.tar.xz' !(*.*)
          tar -cavf '../artifacts/binaries-${{ matrix.platform }}-debug-symbols.tar.xz' *.sym
        working-directory: ${{ inputs.workingDirectory }}/build/bin
        shell: bash
      - name: Create release archives (zip)
        if: matrix.archiveType == 'zip' && steps.platform-check.outputs.should-run == 'true'
        run: |
          set -eo pipefail
          shopt -s nullglob
          mkdir -p ../artifacts
          7z a -y '../artifacts/binaries-${{ matrix.platform }}.zip' *.exe *.js
          7z a -y '../artifacts/binaries-${{ matrix.platform }}-debug-symbols.zip' *.sym *.js.*
        working-directory: ${{ inputs.workingDirectory }}/build/bin
        shell: bash
      - name: Upload compiled binaries artifact
        if: steps.platform-check.outputs.should-run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: ${{ inputs.workingDirectory }}/build/artifacts/*
          retention-days: 3
          if-no-files-found: error
  release:
    name: Create release if needed
    needs:
      - compile
    if: github.ref == inputs.releaseRef
    permissions:
      contents: write
    outputs:
      update: ${{ steps.version.outputs.update }}
      version: ${{ steps.version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: ${{ inputs.persistCredentials }}
      - id: version
        name: Check if a release should be created
        run: |
          set -eo pipefail
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          git fetch --tags > /dev/null
          tag_exists=$(git tag -l "${{ inputs.tagPrefix }}$package_version")

          if [[ -z "$tag_exists" ]]; then
            echo Release does not exist yet - creating release
            echo "update=true" >> $GITHUB_OUTPUT
            echo "version=$package_version" >> $GITHUB_OUTPUT
          else
            echo Release already exists - skipping creation
            echo "update=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.workingDirectory }}
      - name: Download all binary artifacts
        if: steps.version.outputs.update == 'true'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Activate cider
        if: steps.version.outputs.update == 'true'
        run: dart pub global activate cider
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "# Changelog" > $version_changelog_file
          dart pub global run cider describe "$package_version" >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
          files: artifacts/binaries-*/binaries-*
