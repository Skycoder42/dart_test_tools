on:
  workflow_call:
    inputs:
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      buildRunnerArgs:
        type: string
        required: false
        description: Optional additional arguments to be passed to the build runner.
      targets:
        type: string
        required: true
        description: |
          The names of the targets to be compiled. Must be JSON array of strings, each
          string beeing the name of a file in the bin/ folder, without the dart extension.

          Example:
          ["my-app"]
      platforms:
        type: string
        required: false
        default: '["linux","windows","macos","web"]'
        description: |
          A JSON-Formatted list of platforms that unit and integration tests should be run on.
          By default, all platforms are active. The available platforms are:
          - linux
          - windows
          - macos
          - web
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
    outputs:
      releaseCreated:
        value: ${{ jobs.release.outputs.update }}
        description: Holds a boolean value string ("true" or "false"), indicating whether a release was created or not.
jobs:
  compile:
    name: Create compiled artifacts
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web
        include:
          - platform: linux
            binaryType: exe
            compileArgs: -S "bin/$target.exe.sym"
            os: ubuntu-latest
          - platform: windows
            binaryType: exe
            compileArgs: -S "bin/$target.exe.sym"
            os: windows-latest
          - platform: macos
            binaryType: exe
            compileArgs: -S "bin/$target.exe.sym"
            os: macos-latest
          - platform: web
            binaryType: js
            compileArgs: -m -o "bin/$target.js"
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: choco install yq
      - name: Install yq and coreutils (macOS)
        if: runner.os == 'macOS' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: |
          brew install yq coreutils
          echo "$(brew --prefix)/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
      - name: Checkout repository ${{ inputs.repository }}
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
      - name: Remove pubspec_overrides.yaml
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: find . -type f -name "pubspec_overrides.yaml" -exec git rm -f {} \;
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Restore dart packages
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner && contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart run build_runner build --release ${{ inputs.buildRunnerArgs }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Compile executables
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: |
          set -e
          echo '${{ inputs.targets }}' | jq -cr '.[]' | sed 's/\r$//' | while read target; do
            dart compile ${{ matrix.binaryType }} ${{ matrix.compileArgs }} "bin/$target.dart"
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Upload compiled binaries artifact
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.platform }}
          path: ${{ inputs.workingDirectory }}/bin/*.${{ matrix.binaryType }}*
          retention-days: 3
  release:
    name: Create release if needed
    needs:
      - compile
    if: github.ref == inputs.releaseRef
    outputs:
      update: ${{ steps.version.outputs.update }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
      - id: version
        name: Check if a release should be created
        run: |
          set -eo pipefail
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          git fetch --tags > /dev/null
          tag_exists=$(git tag -l "${{ inputs.tagPrefix }}$package_version")

          if [[ -z "$tag_exists" ]]; then
            echo Release does not exist yet - creating release
            echo "update=true" >> $GITHUB_OUTPUT
          else
            echo Release already exists - skipping creation
            echo "update=false" >> $GITHUB_OUTPUT
          fi
      - name: Download all binary artifacts
        if: steps.version.outputs.update == 'true'
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create asset archives
        if: steps.version.outputs.update == 'true'
        run: |
          set -eo pipefail
          for artifact in $(find . -type d -name "binaries-*"); do
            zip -9 "$artifact.zip" "$artifact"/*.exe "$artifact"/*.js
          done
        working-directory: artifacts
      - name: Activate cider
        if: steps.version.outputs.update == 'true'
        run: dart pub global activate cider
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "# Changelog" > $version_changelog_file
          dart pub global run cider describe "$package_version" >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
          files: artifacts/*.zip
